image: php:8.3

stages:
  - test
  - deploy-staging
  - deploy-production

cache:
  paths:
  - webapp/vendor/
  - webapp/node_modules/

# Prepare host, configure and install application, set up database
before_script:
  # Prepare host
  - apt-get update -yqq
  - |
    apt-get install git curl gnupg libcurl4-gnutls-dev libicu-dev \
        libmcrypt-dev libvpx-dev libjpeg-dev libpng-dev libxpm-dev zlib1g-dev \
        libfreetype6-dev libxml2-dev libexpat1-dev libbz2-dev libgmp3-dev \
        libldap2-dev unixodbc-dev libpq-dev libsqlite3-dev libaspell-dev \
        libsnmp-dev libpcre2-dev libtidy-dev libzip-dev libonig-dev -yqq

  # Install NVM, set up node with npm
  - curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
  - . /root/.nvm/nvm.sh
  - nvm install --lts=gallium
  - nvm use --lts=gallium

  # Install PHP extensions, install/enable Xdebug
  - docker-php-ext-install mbstring pdo_mysql curl intl gd xml zip bz2 opcache
  - pecl install xdebug
  - docker-php-ext-enable xdebug

  # Change into webapp directory
  - cd webapp/

  # Install Composer and project dependencies
  - curl -sS https://getcomposer.org/installer | php
  # - php composer.phar install --optimize-autoloader --no-dev
  - php composer.phar install --optimize-autoloader

# PHPUnit test job
test:
  stage: test
  artifacts:
    paths:
      - coverage/
  services:
    - mariadb:latest
  variables:
    MYSQL_DATABASE: barapp
    MYSQL_ROOT_PASSWORD: secret
  script:
    # Set up env file for testing
    - cp .env.gitlab-ci .env

    # Install and build frontend dependencies
    - npm install
    - npm run dev

    # Generate an application key, re-cache, migrate and seed database
    - php artisan key:generate
    - php artisan config:cache
    - php artisan route:cache

    # Migrate and configure currencies
    - php artisan migrate --seed

    # Run PHPUnit tests
    - php vendor/bin/phpunit --coverage-text --colors=never

# Deploy to staging
deploy_staging:
  stage: deploy-staging
  only:
    - /^v(\d+\.)*\d+$/
  environment:
    name: staging
    url: https://staging.barbapappa.app
  script:
    # Install required tools
    - apt-get update -yqq
    - apt-get install sshpass -yqq

    # Install and build frontend dependencies
    - npm install
    - npm run production

    # Node modules are not required to run in production, create tarball
    - rm -rf node_modules
    - cp ../ci/deploy ./
    - tar -czf production.tar.gz *

    # Move files to server, and deploy
    - "sshpass -p $DEPLOY_SSH_PASS ssh -oStrictHostKeyChecking=no $DEPLOY_SSH_USER@$DEPLOY_SSH_HOST 'cd /var/customers/webs/timvisee/staging.barbapappa.app; rm -rf ./new; mkdir ./new'"
    - "sshpass -p $DEPLOY_SSH_PASS scp -oStrictHostKeyChecking=no ./production.tar.gz $DEPLOY_SSH_USER@$DEPLOY_SSH_HOST:/var/customers/webs/timvisee/staging.barbapappa.app/new/"
    - "sshpass -p $DEPLOY_SSH_PASS ssh -oStrictHostKeyChecking=no $DEPLOY_SSH_USER@$DEPLOY_SSH_HOST 'cd /var/customers/webs/timvisee/staging.barbapappa.app/new; tar -xzf production.tar.gz; cd ..; ./new/deploy; rm -rf ./new'"

# Deploy to production
deploy_production:
  stage: deploy-production
  when: manual
  only:
    - /^v(\d+\.)*\d+$/
  environment:
    name: production
    url: https://barbapappa.app
  script:
    # Install required tools
    - apt-get update -yqq
    - apt-get install sshpass -yqq

    # Install and build frontend dependencies
    - npm install
    - npm run production

    # Node modules are not required to run in production, create tarball
    - rm -rf node_modules
    - cp ../ci/deploy ./
    - tar -czf production.tar.gz *

    # Move files to server, and deploy
    - "sshpass -p $DEPLOY_SSH_PASS ssh -oStrictHostKeyChecking=no $DEPLOY_SSH_USER@$DEPLOY_SSH_HOST 'cd /var/customers/webs/timvisee/barbapappa.app; rm -rf ./new; mkdir ./new'"
    - "sshpass -p $DEPLOY_SSH_PASS scp -oStrictHostKeyChecking=no ./production.tar.gz $DEPLOY_SSH_USER@$DEPLOY_SSH_HOST:/var/customers/webs/timvisee/barbapappa.app/new/"
    - "sshpass -p $DEPLOY_SSH_PASS ssh -oStrictHostKeyChecking=no $DEPLOY_SSH_USER@$DEPLOY_SSH_HOST 'cd /var/customers/webs/timvisee/barbapappa.app/new; tar -xzf production.tar.gz; cd ..; ./new/deploy; rm -rf ./new'"
